import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

MODEL, STORAGE, CONDITION = range(3)

MODELS = ["iPhone 11", "iPhone 12", "iPhone 12 mini", "iPhone 12 Pro", "iPhone 12 Pro Max",
          "iPhone 13", "iPhone 13 mini", "iPhone 13 Pro", "iPhone 13 Pro Max",
          "iPhone 14", "iPhone 14 Plus", "iPhone 14 Pro", "iPhone 14 Pro Max",
          "iPhone 15", "iPhone 15 Plus", "iPhone 15 Pro", "iPhone 15 Pro Max",
          "iPhone 16"]

STORAGES = ["64", "128", "256", "512"]
CONDITIONS = ["–ò–¥–µ–∞–ª—å–Ω–æ–µ", "–•–æ—Ä–æ—à–µ–µ", "–ù–∏–∂–µ —Ö–æ—Ä–æ—à–µ–≥–æ"]

TRADEIN_PRICES = {
    ("iPhone 11", "64"): 8000,
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã ...
    ("iPhone 16", "128"): 45000,
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_markup = ReplyKeyboardMarkup(
        [MODELS[i:i+2] for i in range(0, len(MODELS), 2)] + [["–û—Ç–º–µ–Ω–∞"]],
        one_time_keyboard=True, resize_keyboard=True
    )
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å iPhone:", reply_markup=reply_markup)
    return MODEL

async def choose_model(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)

    context.user_data["model"] = text
    reply_markup = ReplyKeyboardMarkup(
        [STORAGES] + [["–ù–∞–∑–∞–¥", "–û—Ç–º–µ–Ω–∞"]],
        one_time_keyboard=True, resize_keyboard=True
    )
    await update.message.reply_text("–£–∫–∞–∂–∏ –æ–±—ä—ë–º –ø–∞–º—è—Ç–∏ (–≤ –ì–ë):", reply_markup=reply_markup)
    return STORAGE

async def choose_storage(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    if text == "–ù–∞–∑–∞–¥":
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏
        reply_markup = ReplyKeyboardMarkup(
            [MODELS[i:i+2] for i in range(0, len(MODELS), 2)] + [["–û—Ç–º–µ–Ω–∞"]],
            one_time_keyboard=True, resize_keyboard=True
        )
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å iPhone:", reply_markup=reply_markup)
        return MODEL

    context.user_data["storage"] = text
    reply_markup = ReplyKeyboardMarkup(
        [CONDITIONS] + [["–ù–∞–∑–∞–¥", "–û—Ç–º–µ–Ω–∞"]],
        one_time_keyboard=True, resize_keyboard=True
    )
    await update.message.reply_text("–£–∫–∞–∂–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", reply_markup=reply_markup)
    return CONDITION

async def choose_condition(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    if text == "–ù–∞–∑–∞–¥":
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–∞–º—è—Ç–∏
        reply_markup = ReplyKeyboardMarkup(
            [STORAGES] + [["–ù–∞–∑–∞–¥", "–û—Ç–º–µ–Ω–∞"]],
            one_time_keyboard=True, resize_keyboard=True
        )
        await update.message.reply_text("–£–∫–∞–∂–∏ –æ–±—ä—ë–º –ø–∞–º—è—Ç–∏ (–≤ –ì–ë):", reply_markup=reply_markup)
        return STORAGE

    model = context.user_data["model"]
    storage = context.user_data["storage"]
    condition = text

    key = (model, storage)
    base_price = TRADEIN_PRICES.get(key)

    if base_price:
        if condition == "–ò–¥–µ–∞–ª—å–Ω–æ–µ":
            price = base_price
        elif condition == "–•–æ—Ä–æ—à–µ–µ":
            price = int(base_price * 0.9)
        else:
            price = "üìå –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É"
    else:
        price = "üìå –¶–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ—Ç ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞"

    await update.message.reply_text(
        f"üì± –ú–æ–¥–µ–ª—å: {model}\nüíæ –ü–∞–º—è—Ç—å: {storage} –ì–ë\nüîß –°–æ—Å—Ç–æ—è–Ω–∏–µ: {condition}\n\nüí∞ –û—Ü–µ–Ω–∫–∞: {price}\n\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /start"
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û—Ü–µ–Ω–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /start")
    return ConversationHandler.END

def main():
    token = os.getenv("BOT_TOKEN")
    application = Application.builder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MODEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_model)],
            STORAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_storage)],
            CONDITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_condition)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), lambda update, context: cancel(update, context)),  # –ó–∞—â–∏—Ç–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        ],
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()
